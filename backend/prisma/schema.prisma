// Prisma Schema file
// Defines all the tables and relations of the database.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Table of users
model User {
  id                     Int                    @id @default(autoincrement())
  username               String                 @unique @db.VarChar(100)
  password               String                 @db.VarChar(256)
  email                  String                 @unique @db.VarChar(256)
  emailVerified          Boolean                @default(false)
  firstname              String?                @db.VarChar(100)
  lastname               String?                @db.VarChar(100)
  admin                  Boolean                @default(false)
  profilepicture         String?                @db.VarChar(200)
  joined                 DateTime               @default(now())
  difficultyPref         Difficulty?            @relation(fields: [difficultyId], references: [id], onDelete: SetNull)
  difficultyId           Int?
  costPref               Cost?                  @relation(fields: [costId], references: [id], onDelete: SetNull)
  costId                 Int?
  diet                   Diet?                  @relation(fields: [dietId], references: [id], onDelete: SetNull)
  dietId                 Int?
  recipes                Recipe[]
  comments               Comment[]
  recipeGroups           RecipeGroup[]
  allergies              UserAllergy[]
  shoppingListCategories ShoppingListCategory[]
  favouriteRecipes       Favourite[]
  weeklyMenuItems        WeeklyMenuItem[]
  dontRecommendRecipes   DontRecommend[]
}

// Table of recipes
model Recipe {
  id                 Int                @id @default(autoincrement())
  name               String             @db.VarChar(100)
  description        String             @db.VarChar(1000)
  minute             Int?
  difficulty         Difficulty?        @relation(fields: [difficultyId], references: [id], onDelete: SetNull)
  difficultyId       Int?
  cost               Cost?              @relation(fields: [costId], references: [id], onDelete: SetNull)
  costId             Int?
  calories           Int?
  portions           Int?
  uploaded           DateTime           @default(now())
  lastModified       DateTime           @default(now())
  photo              String             @db.VarChar(200)
  user               User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             Int?
  ingredients        Ingredient[]
  steps              Step[]
  recipeCategories   RecipeInCategory[]
  allergens          AllergenInRecipe[]
  diets              RecipeInDiet[]
  comments           Comment[]
  recipeGroups       RecipeInGroup[]
  usersFavourite     Favourite[]
  weeklyMenuItems    WeeklyMenuItem[]
  dontRecommendUsers DontRecommend[]
}

// Table of ingredients (for the recipes)
model Ingredient {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(100)
  amount   Decimal? @db.Decimal(10, 3)
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
  unit     Unit?    @relation(fields: [unitId], references: [id], onDelete: SetNull)
  unitId   Int?
}

// Table of steps (for the recipes)
model Step {
  id       Int    @id @default(autoincrement())
  number   Int
  content  String @db.VarChar(1000)
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
}

// Table of units (for the ingredients and shopping list items)
model Unit {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(30)
  ingredients       Ingredient[]
  shoppingListItems ShoppingListItem[]
}

// Table of difficulty options (for the recipes)
model Difficulty {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(15)
  level   Int?     @unique
  users   User[]
  recipes Recipe[]
}

// Table of cost options (for the recipes)
model Cost {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(15)
  level   Int?     @unique
  users   User[]
  recipes Recipe[]
}

// Table of comments
model Comment {
  id       Int      @id @default(autoincrement())
  content  String?  @db.VarChar(300)
  rating   Int
  uploaded DateTime @default(now())
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int

  @@unique([recipeId, userId])
}

// Table of recipe groups (that the users can create to categorize recipes for themselves)
model RecipeGroup {
  id      Int             @id @default(autoincrement())
  name    String          @db.VarChar(50)
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  recipes RecipeInGroup[]
}

// Connecting table between Recipe and RecipeGroup
model RecipeInGroup {
  recipeGroup RecipeGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     Int
  recipe      Recipe      @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int
  added       DateTime    @default(now())

  @@id([groupId, recipeId])
}

// Table of category options (for the recipes)
model RecipeCategory {
  id      Int                @id @default(autoincrement())
  name    String             @unique @db.VarChar(50)
  recipes RecipeInCategory[]
}

// Connetcing table between Recipe and RecipeCategory
model RecipeInCategory {
  recipeCategory RecipeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     Int
  recipe         Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId       Int
  primary        Boolean        @default(false)

  @@id([categoryId, recipeId])
}

// Table of allergen options (whether they are in a recipe or a user is allergic to them)
model Allergen {
  id      Int                @id @default(autoincrement())
  name    String             @unique @db.VarChar(50)
  recipes AllergenInRecipe[]
  users   UserAllergy[]
}

// Connectiong table between Allergen and Recipe
model AllergenInRecipe {
  allergen   Allergen @relation(fields: [allergenId], references: [id], onDelete: Cascade)
  allergenId Int
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId   Int

  @@id([allergenId, recipeId])
}

// Connecting table between Allergen and User
model UserAllergy {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  allergen   Allergen @relation(fields: [allergenId], references: [id], onDelete: Cascade)
  allergenId Int

  @@id([userId, allergenId])
}

// Table of diet options (whether a recipe fits a diet, or a user follows a diet)
model Diet {
  id      Int            @id @default(autoincrement())
  name    String         @unique @db.VarChar(50)
  recipes RecipeInDiet[]
  users   User[]
}

// Connecting table between Recipe and Diet
model RecipeInDiet {
  diet     Diet   @relation(fields: [dietId], references: [id], onDelete: Cascade)
  dietId   Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int

  @@id([dietId, recipeId])
}

// Table of shopping list items
model ShoppingListItem {
  id                   Int                  @id @default(autoincrement())
  name                 String               @db.VarChar(100)
  amount               Decimal?             @db.Decimal(5, 3)
  done                 Boolean              @default(false)
  unit                 Unit?                @relation(fields: [unitId], references: [id], onDelete: SetNull)
  unitId               Int?
  shoppingListCategory ShoppingListCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId           Int
}

// Table of shopping list categories
model ShoppingListCategory {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(100)
  shoppingListItems ShoppingListItem[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
}

// Table of each users' favourite recipes
model Favourite {
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  added    DateTime @default(now())

  @@id([recipeId, userId])
}

// Table of users' weekly menu items
model WeeklyMenuItem {
  id          Int     @id @default(autoincrement())
  recipe      Recipe? @relation(fields: [recipeId], references: [id], onDelete: SetNull)
  recipeId    Int?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  day         Int?    @db.TinyInt // 0 - 6, starting from Monday
  meal        Int     @db.TinyInt // 1 => breakfast, 2 => lunch, 3 => dinner, 4 => dessert1, 5 => dessert2 
  nextWeek    Boolean
  unsetByUser Boolean @default(false)

  @@unique([userId, day, meal, nextWeek])
}

// Table of which recipes each user asked not to be recommended in their weekly menu
model DontRecommend {
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  recipe       Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     Int
  timeOfAction DateTime @default(now())

  @@id([recipeId, userId])
}
